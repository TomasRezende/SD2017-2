#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
import sys

from thrift.transport import TTransport


class ElementNotFoundException(TException):

    thrift_spec = (
    )

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('ElementNotFoundException')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Vertice(object):
    """
    Attributes:
     - id
     - cor
     - peso
     - descricao
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'id', None, None, ),  # 1
        (2, TType.I32, 'cor', None, None, ),  # 2
        (3, TType.DOUBLE, 'peso', None, None, ),  # 3
        (4, TType.STRING, 'descricao', 'UTF8', None, ),  # 4
    )

    def __init__(self, id=None, cor=None, peso=None, descricao=None,):
        self.id = id
        self.cor = cor
        self.peso = peso
        self.descricao = descricao

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.cor = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.peso = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.descricao = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('Vertice')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 1)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.cor is not None:
            oprot.writeFieldBegin('cor', TType.I32, 2)
            oprot.writeI32(self.cor)
            oprot.writeFieldEnd()
        if self.peso is not None:
            oprot.writeFieldBegin('peso', TType.DOUBLE, 3)
            oprot.writeDouble(self.peso)
            oprot.writeFieldEnd()
        if self.descricao is not None:
            oprot.writeFieldBegin('descricao', TType.STRING, 4)
            oprot.writeString(self.descricao.encode('utf-8') if sys.version_info[0] == 2 else self.descricao)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Aresta(object):
    """
    Attributes:
     - verticeUm
     - verticeDois
     - peso
     - bidirecional
     - descricao
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'verticeUm', (Vertice, Vertice.thrift_spec), None, ),  # 1
        (2, TType.STRUCT, 'verticeDois', (Vertice, Vertice.thrift_spec), None, ),  # 2
        (3, TType.DOUBLE, 'peso', None, None, ),  # 3
        (4, TType.BOOL, 'bidirecional', None, None, ),  # 4
        (5, TType.STRING, 'descricao', 'UTF8', None, ),  # 5
    )

    def __init__(self, verticeUm=None, verticeDois=None, peso=None, bidirecional=None, descricao=None,):
        self.verticeUm = verticeUm
        self.verticeDois = verticeDois
        self.peso = peso
        self.bidirecional = bidirecional
        self.descricao = descricao

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.verticeUm = Vertice()
                    self.verticeUm.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.verticeDois = Vertice()
                    self.verticeDois.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.peso = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.bidirecional = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.descricao = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('Aresta')
        if self.verticeUm is not None:
            oprot.writeFieldBegin('verticeUm', TType.STRUCT, 1)
            self.verticeUm.write(oprot)
            oprot.writeFieldEnd()
        if self.verticeDois is not None:
            oprot.writeFieldBegin('verticeDois', TType.STRUCT, 2)
            self.verticeDois.write(oprot)
            oprot.writeFieldEnd()
        if self.peso is not None:
            oprot.writeFieldBegin('peso', TType.DOUBLE, 3)
            oprot.writeDouble(self.peso)
            oprot.writeFieldEnd()
        if self.bidirecional is not None:
            oprot.writeFieldBegin('bidirecional', TType.BOOL, 4)
            oprot.writeBool(self.bidirecional)
            oprot.writeFieldEnd()
        if self.descricao is not None:
            oprot.writeFieldBegin('descricao', TType.STRING, 5)
            oprot.writeString(self.descricao.encode('utf-8') if sys.version_info[0] == 2 else self.descricao)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Grafo(object):
    """
    Attributes:
     - Vertices
     - Arestas
    """

    thrift_spec = (
        None,  # 0
        (1, TType.LIST, 'Vertices', (TType.STRUCT, (Vertice, Vertice.thrift_spec), False), None, ),  # 1
        (2, TType.LIST, 'Arestas', (TType.STRUCT, (Aresta, Aresta.thrift_spec), False), None, ),  # 2
    )

    def __init__(self, Vertices=None, Arestas=None,):
        self.Vertices = Vertices
        self.Arestas = Arestas

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.Vertices = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = Vertice()
                        _elem5.read(iprot)
                        self.Vertices.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.Arestas = []
                    (_etype9, _size6) = iprot.readListBegin()
                    for _i10 in range(_size6):
                        _elem11 = Aresta()
                        _elem11.read(iprot)
                        self.Arestas.append(_elem11)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('Grafo')
        if self.Vertices is not None:
            oprot.writeFieldBegin('Vertices', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.Vertices))
            for iter12 in self.Vertices:
                iter12.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.Arestas is not None:
            oprot.writeFieldBegin('Arestas', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.Arestas))
            for iter13 in self.Arestas:
                iter13.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
