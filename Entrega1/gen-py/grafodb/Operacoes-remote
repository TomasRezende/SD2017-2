#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from grafodb import Operacoes
from grafodb.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  void criaVertice(Vertice v)')
    print('  void criaAresta(int verticeUm, int verticeDois, double peso, bool bidirecional, string descricao)')
    print('  void atualizaVertice(Vertice v)')
    print('  void atualizaAresta(int verticeUm, int verticeDois, double peso, bool bidirecional, string descricao)')
    print('  Vertice leVertice(int Id)')
    print('  Aresta leAresta(int verticeUm, int verticeDois)')
    print('  void removeVertice(int id)')
    print('  void removeAresta(int verticeUm, int verticeDois)')
    print('   arestasDoVertice(int id)')
    print('   vizinhos(int id)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = Operacoes.Client(protocol)
transport.open()

if cmd == 'criaVertice':
    if len(args) != 1:
        print('criaVertice requires 1 args')
        sys.exit(1)
    pp.pprint(client.criaVertice(eval(args[0]),))

elif cmd == 'criaAresta':
    if len(args) != 5:
        print('criaAresta requires 5 args')
        sys.exit(1)
    pp.pprint(client.criaAresta(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), args[4],))

elif cmd == 'atualizaVertice':
    if len(args) != 1:
        print('atualizaVertice requires 1 args')
        sys.exit(1)
    pp.pprint(client.atualizaVertice(eval(args[0]),))

elif cmd == 'atualizaAresta':
    if len(args) != 5:
        print('atualizaAresta requires 5 args')
        sys.exit(1)
    pp.pprint(client.atualizaAresta(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), args[4],))

elif cmd == 'leVertice':
    if len(args) != 1:
        print('leVertice requires 1 args')
        sys.exit(1)
    pp.pprint(client.leVertice(eval(args[0]),))

elif cmd == 'leAresta':
    if len(args) != 2:
        print('leAresta requires 2 args')
        sys.exit(1)
    pp.pprint(client.leAresta(eval(args[0]), eval(args[1]),))

elif cmd == 'removeVertice':
    if len(args) != 1:
        print('removeVertice requires 1 args')
        sys.exit(1)
    pp.pprint(client.removeVertice(eval(args[0]),))

elif cmd == 'removeAresta':
    if len(args) != 2:
        print('removeAresta requires 2 args')
        sys.exit(1)
    pp.pprint(client.removeAresta(eval(args[0]), eval(args[1]),))

elif cmd == 'arestasDoVertice':
    if len(args) != 1:
        print('arestasDoVertice requires 1 args')
        sys.exit(1)
    pp.pprint(client.arestasDoVertice(eval(args[0]),))

elif cmd == 'vizinhos':
    if len(args) != 1:
        print('vizinhos requires 1 args')
        sys.exit(1)
    pp.pprint(client.vizinhos(eval(args[0]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
